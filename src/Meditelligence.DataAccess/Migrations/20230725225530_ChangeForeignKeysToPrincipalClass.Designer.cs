// <auto-generated />
using Meditelligence.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Meditelligence.DataAccess.Migrations
{
    [DbContext(typeof(MeditelligenceDBContext))]
    [Migration("20230725225530_ChangeForeignKeysToPrincipalClass")]
    partial class ChangeForeignKeysToPrincipalClass
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("Meditelligence.Models.Models.Illness", b =>
                {
                    b.Property<int>("IllnessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Advice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("IllnessID");

                    b.ToTable("Illnesses");

                    b.HasData(
                        new
                        {
                            IllnessID = 1,
                            Advice = "Speak to your GP for further information regarding this",
                            Description = "This is a test disease that will be later removed",
                            Name = "Test disease 1"
                        },
                        new
                        {
                            IllnessID = 2,
                            Advice = "Speak to a specialist re. this condition, as it could be severe",
                            Description = "This is another test disease that will be later removed",
                            Name = "Test disease 2"
                        });
                });

            modelBuilder.Entity("Meditelligence.Models.Models.IllnessToSymptom", b =>
                {
                    b.Property<int>("IllnessRefID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SymptomRefID")
                        .HasColumnType("INTEGER");

                    b.HasKey("IllnessRefID", "SymptomRefID");

                    b.HasIndex("SymptomRefID");

                    b.ToTable("IllnessToSymptoms");

                    b.HasData(
                        new
                        {
                            IllnessRefID = 1,
                            SymptomRefID = 1
                        },
                        new
                        {
                            IllnessRefID = 1,
                            SymptomRefID = 2
                        },
                        new
                        {
                            IllnessRefID = 1,
                            SymptomRefID = 3
                        },
                        new
                        {
                            IllnessRefID = 2,
                            SymptomRefID = 3
                        },
                        new
                        {
                            IllnessRefID = 2,
                            SymptomRefID = 4
                        },
                        new
                        {
                            IllnessRefID = 2,
                            SymptomRefID = 5
                        });
                });

            modelBuilder.Entity("Meditelligence.Models.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("SymptomID");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            SymptomID = 1,
                            Description = "High fever",
                            Name = "Symptom 1"
                        },
                        new
                        {
                            SymptomID = 2,
                            Description = "Short bursts of giggling",
                            Name = "Symptom 2"
                        },
                        new
                        {
                            SymptomID = 3,
                            Description = "Seeing hallucinations",
                            Name = "Symptom 3"
                        },
                        new
                        {
                            SymptomID = 4,
                            Description = "Extreme fits of anger",
                            Name = "Symptom 4"
                        },
                        new
                        {
                            SymptomID = 5,
                            Description = "No description",
                            Name = "Symptom 5"
                        });
                });

            modelBuilder.Entity("Meditelligence.Models.Models.IllnessToSymptom", b =>
                {
                    b.HasOne("Meditelligence.Models.Models.Illness", "IllnessRecord")
                        .WithMany("SymptomList")
                        .HasForeignKey("IllnessRefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meditelligence.Models.Models.Symptom", "SymptomRecord")
                        .WithMany("IllnessList")
                        .HasForeignKey("SymptomRefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IllnessRecord");

                    b.Navigation("SymptomRecord");
                });

            modelBuilder.Entity("Meditelligence.Models.Models.Illness", b =>
                {
                    b.Navigation("SymptomList");
                });

            modelBuilder.Entity("Meditelligence.Models.Models.Symptom", b =>
                {
                    b.Navigation("IllnessList");
                });
#pragma warning restore 612, 618
        }
    }
}
